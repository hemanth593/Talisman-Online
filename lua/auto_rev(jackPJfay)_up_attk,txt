--lua
log 'clear' log 'mode compact'
local CLIENT = 0x00400000
function charName()
    local CLIENT = 0x00400000
    local CHAR_NAME= readmem(CLIENT + 0x00C15980, "d")
    local name = readmem(CHAR_NAME + 0x3C4, "s", 30)

    if string.match(name, "^[%w]+$") then return name
    else
        return readmem(readmem(CHAR_NAME + 0x3C4, "d") + 0x0, "s", 30)
    end
end

function CHAR_HP()
    return readmem (CLIENT + 0x00C15980, "d")
end
function get_current_HP()
    return readmem(CHAR_HP() + 0x320, "d")
end
function get_percent_HP()
    return readmem(CHAR_HP() + 0x3EC, "b")
end
function get_pethp_skillpoints()
    return readmem(CHAR_HP() + 0x3E8, "d")
end
function get_basic_max_HP()
    return readmem(CHAR_HP() + 0x3E4, "d")
end

function TOTAL_CHAR_MAX_HP()
    local maxhp = floor((((get_percent_HP() - 100) / 100) * (get_basic_max_HP() + get_pethp_skillpoints())) + (get_basic_max_HP() + get_pethp_skillpoints()))
     return maxhp
end

function targetHP()
   --return readmem(readmem(readmem(readmem(readmem(readmem(CLIENT + 0x00EC2D28, "d") +  0x18 , "d") + 0x16C , "d") + 0x0 , "d") + 0xC , "d") + 0x3B38 , "d")
    local targetHPPointers = {0x18, 0x16C, 0x0, 0xC, 0x1F8, 0x448, 0xC00}
    local Target_HP = readmem(CLIENT + 0x00EC2D28, "d")
    for i = 1, #targetHPPointers
    do
        Target_Selected = readmem(Target_HP + targetHPPointers[i], "d")
    end

    return  readmem(Target_HP + 0xC00, "d")
end

function targetHPpercent()
        local max = 597
        local min = 460
        local x =  targetHP()
        local c = (100 * (x - min)/137)
        if c < 0 then
            return 0
        else
            return c
        end
end
function getLocation()
    local locationPointers = {0x18, 0x2304, 0xC, 0x1F4, 0x54, 0x54}
    local Location = readmem(CLIENT + 0x00EC2D28, "d")
    for i = 1, #locationPointers
    do
    Location = readmem(Location + locationPointers[i], "d")
    end
    local location = readmem(Location + 0x0, "s", 51)
    local position = regexp(location, [[\[]])
    return string.sub(location, 0, position - 2)
end
function getCharLevel()
    return readmem(readmem(CLIENT + 0x00C15980, "d") + 0x32C, "w")
end
function Battle_Status()
    return readmem(readmem(CLIENT + 0x00C15980, "d") + 0x7BC, "b")
end
function Target_Selected()
    local targetSelectedPointers = {0xD0, 0x794, 0x0, 0x24, 0xAC, 0x20, 0x1AC}
    local Target_Selected = readmem(CLIENT + 0x00EB5010, "d")
    for i = 1, #targetSelectedPointers
    do
        Target_Selected = readmem(Target_Selected + targetSelectedPointers[i], "d")
    end

    return  readmem(Target_Selected + 0x24A0, "d")
end

function Target_Name()
    local targetNamePointers = {0x18, 0xB1C, 0x0, 0xC, 0xD9C}
    local Target_Name = readmem(CLIENT + 0x012C2D28, "d")
    for i = 1, #targetNamePointers
    do
        Target_Name = readmem(Target_Name + targetNamePointers[i], "d")
    end

    local name = readmem(Target_Name + 0x9AC, "s", 51)

    -- If name is alphanumeric return it safely
    if string.match(name, "^[%w ']+$") then return name
    else
        return readmem(readmem(Target_Name + 0x9AC, "d") + 0x0, "s", 51)
    end

end
function Char_Sit()
    return readmem(CLIENT + 0xC50938, "d")
end
function mount_status()
    mount = readmem(readmem(CLIENT + 0x00C15980, "d") + 0x81C, "d")
    if mount > 0 then
        return 1
    else
        return 0
    end
end
function Tab()
    if HP_Percent() < 50 then
            if Battle_Status() == 0 then
                if Char_Sit() == 0 then
                    while HP_Percent() < 95 do
                        send ("56")
                    end
                    wait ("1s")
                    log("Finding mob")
                    send ("Tab")
                    Battle_decider()
                end
            end
    else
        wait ("1s")
        log("Finding mob")
        send ("Tab")
        Battle_decider()
    end
end

function Battle()
    log("attacking")
    local timer = os.time()
    local timer2 = timer + 15
        while targetHPpercent() > 0 and os.time() < timer2 do
          --  log("Timer_COUNT1 : ",timer)
         --   log(targetHPpercent(),os.time(),Target_Selected())
            wait ("1s")
            if targetHPpercent() == 100 and os.time() > timer2 and Target_Selected() == 1 then
                local timer = os.time()
                local timer2 = timer + 15
                log("Target Stucked as more than 5 seconds with full HP")
                Tab()
            end
          --  log("Timer_COUNT2 : ",timer)
            send ("222")
            wait(30)
        end
        if targetHPpercent() == 0 then
            log("KILLED")
            log(killed(1))
      --  log("Timer_COUNT3 : ",timer)
            Tab()
        end
end
--Battle Decider
function Battle_decider()
    while Target_Selected() == 0 do
        log("Target_Selected :",Target_Name())
        Tab()
    end
    if Target_Selected() == 1 then
        log("Target_Selected :",Target_Name())
        wait("1s")
    end
    while Battle_Status() == 1 do
        log("Somebody else attacking us")
        Battle()
    end
    while HP_Percent() > 50  do
        log("Char :",charName()," | Current_HP %:",HP_Percent())
        Battle()
    end
end
--Mana
function Mana()
    return readmem(CLIENT + 0x00C15980, "d")
end
-- Current Mana
function Current_Mana()
    return readmem(Mana() + 0x324, "d")
end
-- Mana buff
function Mana_Buff()
    return readmem(Mana() + 0x2B8, "d")
end
-- Max mana
function Max_Mana()
    return readmem(Mana()  + 0x2B4, "d") + Mana_Buff()
end

--ManaPercent
function Mana_Percent()
   return  ((Current_Mana()/ Max_Mana())*100)
end
--HPPercent
function HP_Percent()
   return  ((get_current_HP()/ TOTAL_CHAR_MAX_HP())*100)
end

local kill = 0

function killed(x)

               kill = kill + x
               log("kill_count :",kill)
end
--while true do
 --  log ("Current HP :",get_current_HP(),"Max HP :",TOTAL_CHAR_MAX_HP(),"Current HP in %:",HP_Percent(),"Current Mana :",Current_Mana(),"Max Mana :",Max_Mana(),"Current Mana in %:",Mana_Percent(),"Target HP % ",targetHPpercent())
--end

--function revdead()
--     local ConditionB = "b"
--	local hpJ = get_current_HP()
--	if hpJ < 1 then
--	wait(S)
--	log("Char "..stamina.MyCharName, "is Dead !")
--	wait(S)
--	if ConditionB ~= nil then
--		for i = 1, #ConditionB
--		do
--		log("Trying to use Jackstraw")
--		left(442, 334) wait("3s")
--		end
--		end
--       local hpn = get_current_HP()
--		if hpn < 1 then
--			log("Jackstraw not found, Reviving normal...")
--           left(517, 467) wait("3s")
--            end
--        log("Char "..charName(), "is Live Again !")
--	end
--end
function getConfirmBox()
    return readmem(CLIENT + 0xEC2DA4, "d")
end

function deadbox()
    local dead_box = readmem(CLIENT + 0xC2E894, "d")
    if dead_box > 1 then
        return 0
    end
    if dead_box == 1 then
        return 1
    end
end
function dead()
   if get_current_HP() < 1 and Battle_Status() == 0 and deadbox() == 1 then
       return 1
   else
       return 0
   end
end

function auto_attack_on_rev(attackkeys)
    if dead() == 1 and getConfirmBox() == 1 then
        wait(30)
        left(442, 334)
        wait(30)
    else
        if  targetHPpercent() > 0 and Target_Selected() == 1 and dead() == 0 then
        wait(30)
            send (attackkeys)
        wait(30)
        end
    end
end
function pcp_suwan(attackkeys)
    if dead() == 1  then
        wait(30)
        left(508, 467)
        wait(30)
    else
        if  targetHPpercent() > 0 and Target_Selected() == 1 and dead() == 0 then
        wait(30)
            send (attackkeys)
        wait(30)
        end
    end
end


while true do
    --pcp_suwan(123) -- for function keys use pcp_suwan("F5")
    auto_attack_on_rev("F5")
end
